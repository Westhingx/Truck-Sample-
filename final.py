import streamlit as st
import plotly.graph_objects as go

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏•‡πà‡∏≠‡∏á
def calculate_volume(w, l, h):
    return w * l * h

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏õ‡πÄ‡∏•‡πá‡∏Å (‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£)
def sort_boxes_by_volume(boxes):
    return sorted(boxes, key=lambda b: calculate_volume(b['width'], b['length'], b['height']), reverse=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏ñ 3D
def pack_boxes(truck_dimensions, boxes):
    truck_w, truck_l, truck_h = truck_dimensions
    used_volume = 0
    packed_boxes = []
    pos_x, pos_y, pos_z = 0, 0, 0
    current_layer_height = 0

    for box in sort_boxes_by_volume(boxes):
        for _ in range(box['quantity']):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if (pos_x + box['width'] <= truck_w and
                pos_y + box['length'] <= truck_l and
                pos_z + box['height'] <= truck_h):

                packed_boxes.append({
                    'id': box['id'],
                    'pos': (pos_x, pos_y, pos_z),
                    'dim': (box['width'], box['length'], box['height'])
                })

                used_volume += calculate_volume(box['width'], box['length'], box['height'])

                pos_x += box['width']  # ‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡∏ô x

                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏Å‡∏ô x ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏Å‡∏ô y
                if pos_x >= truck_w:
                    pos_x = 0
                    pos_y += box['length']

                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏Å‡∏ô y ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏Å‡∏ô z (‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà)
                    if pos_y >= truck_l:
                        pos_y = 0
                        pos_z += current_layer_height
                        current_layer_height = 0

                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ
                current_layer_height = max(current_layer_height, box['height'])
            else:
                # ‡∏ñ‡πâ‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
                break

    truck_volume = calculate_volume(truck_w, truck_l, truck_h)
    used_percent = (used_volume / truck_volume) * 100

    return packed_boxes, used_percent

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û 3D ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á
def visualize_boxes(packed_boxes):
    fig = go.Figure()

    for box in packed_boxes:
        x, y, z = box['pos']
        w, l, h = box['dim']

        fig.add_trace(go.Mesh3d(
            x=[x, x+w, x+w, x, x, x+w, x+w, x],
            y=[y, y, y+l, y+l, y, y, y+l, y+l],
            z=[z, z, z, z, z+h, z+h, z+h, z+h],
            color='lightblue',
            opacity=0.5,
            alphahull=0,
            name=f"Box {box['id']}"
        ))

    fig.update_layout(
        scene=dict(
            xaxis_title='‡∏Å‡∏ß‡πâ‡∏≤‡∏á (cm)',
            yaxis_title='‡∏¢‡∏≤‡∏ß (cm)',
            zaxis_title='‡∏™‡∏π‡∏á (cm)',
            xaxis=dict(nticks=5, range=[0, 250]),
            yaxis=dict(nticks=5, range=[0, 500]),
            zaxis=dict(nticks=5, range=[0, 200]),
        ),
        margin=dict(l=0, r=0, b=0, t=30),
        title="‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å"
    )

    st.plotly_chart(fig)

# --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡πà‡∏ß‡∏ô Streamlit UI ---

st.title("üì¶ Vehicle Space Utilization Planner (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏ô‡∏£‡∏ñ‡∏Ç‡∏ô‡∏™‡πà‡∏á)")

st.markdown("""
‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ö‡∏ô‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î  
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
""")

# ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ñ (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)
truck_width = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏£‡∏ñ (cm)", min_value=50, max_value=500, value=200)
truck_length = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏ñ (cm)", min_value=50, max_value=1000, value=400)
truck_height = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏£‡∏ñ (cm)", min_value=50, max_value=500, value=180)

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î)
boxes = [
    {'id': 'A', 'width': 50, 'length': 60, 'height': 40, 'quantity': 4},
    {'id': 'B', 'width': 40, 'length': 40, 'height': 40, 'quantity': 10},
    {'id': 'C', 'width': 100, 'length': 100, 'height': 50, 'quantity': 1},
]

if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á"):
    truck_dim = (truck_width, truck_length, truck_height)

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
    packed_boxes, used_percent = pack_boxes(truck_dim, boxes)

    st.write(f"‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: **{used_percent:.2f}%** ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û 3D
    visualize_boxes(packed_boxes)

else:
    st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äò‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‚Äô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")
