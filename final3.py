import streamlit as st
import plotly.graph_objects as go

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
# -----------------------------
def calculate_volume(w, l, h):
    return w * l * h

def sort_boxes_by_volume(boxes):
    return sorted(boxes, key=lambda b: calculate_volume(b['width'], b['length'], b['height']), reverse=True)

def pack_boxes(container_dim, max_weight, boxes):
    w, l, h = container_dim
    used_volume = 0
    total_weight = 0
    packed_boxes = []
    pos_x = pos_y = pos_z = 0
    current_layer_height = 0

    for box in sort_boxes_by_volume(boxes):
        for _ in range(box['quantity']):
            if (pos_x + box['width'] <= w and
                pos_y + box['length'] <= l and
                pos_z + box['height'] <= h):

                if total_weight + box['weight'] > max_weight:
                    break

                packed_boxes.append({
                    'id': box['id'],
                    'pos': (pos_x, pos_y, pos_z),
                    'dim': (box['width'], box['length'], box['height']),
                    'weight': box['weight']
                })

                used_volume += calculate_volume(box['width'], box['length'], box['height'])
                total_weight += box['weight']
                pos_x += box['width']

                if pos_x >= w:
                    pos_x = 0
                    pos_y += box['length']
                    if pos_y >= l:
                        pos_y = 0
                        pos_z += current_layer_height
                        current_layer_height = 0

                current_layer_height = max(current_layer_height, box['height'])
            else:
                break

    container_volume = calculate_volume(w, l, h)
    used_percent = (used_volume / container_volume) * 100
    return packed_boxes, used_percent, total_weight

def visualize_boxes(packed_boxes):
    fig = go.Figure()
    for box in packed_boxes:
        x, y, z = box['pos']
        w, l, h = box['dim']

        fig.add_trace(go.Mesh3d(
            x=[x, x+w, x+w, x, x, x+w, x+w, x],
            y=[y, y, y+l, y+l, y, y, y+l, y+l],
            z=[z, z, z, z, z+h, z+h, z+h, z+h],
            color='lightblue',
            opacity=0.5,
            alphahull=0,
            name=f"Box {box['id']}"
        ))

    fig.update_layout(
        scene=dict(
            xaxis_title='Width (cm)',
            yaxis_title='Length (cm)',
            zaxis_title='Height (cm)'
        ),
        margin=dict(l=0, r=0, b=0, t=30),
        title="üì¶ ‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå"
    )
    st.plotly_chart(fig)

# -----------------------------
# UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
# -----------------------------
st.title("üö¢ Container Packing Planner")
st.markdown("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô **‡∏ï‡∏π‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå** ‡πÅ‡∏ö‡∏ö 3 ‡∏°‡∏¥‡∏ï‡∏¥")

# üî≤ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏π‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå
container_options = {
    "‡∏ï‡∏π‡πâ 20 ‡∏ü‡∏∏‡∏ï (20ft)": {
        "width": 244, "length": 610, "height": 251, "empty_weight": 2200
    },
    "‡∏ï‡∏π‡πâ 40 ‡∏ü‡∏∏‡∏ï (40ft)": {
        "width": 244, "length": 1219, "height": 251, "empty_weight": 3800
    },
    "‡∏ï‡∏π‡πâ 40 ‡∏ü‡∏∏‡∏ï High Cube": {
        "width": 244, "length": 1219, "height": 290, "empty_weight": 3900
    },
    "‡∏ï‡∏π‡πâ 45 ‡∏ü‡∏∏‡∏ï (45ft)": {
        "width": 244, "length": 1370, "height": 290, "empty_weight": 4000
    }
}

selected_container = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏π‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå", list(container_options.keys()))
container = container_options[selected_container]

# ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥ (‡∏£‡∏ß‡∏°‡∏ï‡∏π‡πâ)
max_total_weight = 30000  # ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
available_weight = max_total_weight - container['empty_weight']

st.info(f"""
üìè **‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏π‡πâ:**  
- ‡∏Å‡∏ß‡πâ‡∏≤‡∏á: {container['width']} cm  
- ‡∏¢‡∏≤‡∏ß: {container['length']} cm  
- ‡∏™‡∏π‡∏á: {container['height']} cm  
‚öñÔ∏è **‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πÑ‡∏î‡πâ:** {available_weight} ‡∏Å‡∏Å. (‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏π‡πâ)
""")

# üì¶ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
boxes = [
    {'id': 'A', 'width': 50, 'length': 60, 'height': 40, 'weight': 30, 'quantity': 4},
    {'id': 'B', 'width': 40, 'length': 40, 'height': 40, 'weight': 20, 'quantity': 10},
    {'id': 'C', 'width': 100, 'length': 100, 'height': 50, 'weight': 80, 'quantity': 1},
]

if st.button("üöÄ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á"):
    dim = (container['width'], container['length'], container['height'])
    packed_boxes, used_percent, total_weight = pack_boxes(dim, available_weight, boxes)

    st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•")
    st.write(f"‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: **{used_percent:.2f}%**")
    st.write(f"‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á: **{total_weight:.2f} ‡∏Å‡∏Å.** / {available_weight:.0f} ‡∏Å‡∏Å.")

    if total_weight >= available_weight:
        st.warning("‚ö†Ô∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏π‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á")

    visualize_boxes(packed_boxes)
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á")
